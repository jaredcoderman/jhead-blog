<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>jhead.blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on jhead.blog</description>
    <generator>Hugo -- 0.147.1</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Initial Access: Spearphishing Example</title>
      <link>http://localhost:1313/posts/initial-access/</link>
      <pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/initial-access/</guid>
      <description>&lt;p&gt;In the MITRE ATT&amp;amp;CK Framework, which classifies and creates chains of events for certain kinds of hacker behavior, Initial Access is one of the first tactics used in an attack. It’s sort of self-explanatory—it describes how the attacker first got into a system. I’m just learning about these concepts, so I wanted to start from the beginning. I’m interested in a few techniques, and I’ll go over them in my next few posts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Initial Access: Spearphishing Example</title>
      <link>http://localhost:1313/posts/lateral-movement/</link>
      <pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/lateral-movement/</guid>
      <description>&lt;p&gt;In the MITRE ATT&amp;amp;CK Framework, which classifies and creates chains of events for certain kinds of hacker behavior, Initial Access is one of the first tactics used in an attack. It’s sort of self-explanatory—it describes how the attacker first got into a system. I’m just learning about these concepts, so I wanted to start from the beginning. I’m interested in a few techniques, and I’ll go over them in my next few posts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Process Sentinel (WIP)</title>
      <link>http://localhost:1313/projects/process-sentinel/</link>
      <pubDate>Sat, 03 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/process-sentinel/</guid>
      <description>A Go-based tool that monitors live process trees and flags suspicious chains based on parent-child relationships and YARA rules.</description>
    </item>
    <item>
      <title>Living off the Land Attacks</title>
      <link>http://localhost:1313/posts/living-off-the-land-attack/</link>
      <pubDate>Fri, 02 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/living-off-the-land-attack/</guid>
      <description>&lt;h2 id=&#34;a-brief-history&#34;&gt;A Brief History&lt;/h2&gt;
&lt;p&gt;As cyber defenses evolved beyond file-based malware, hackers and red teamers had to develop new strategies for maintaining unauthorized access to systems. While they still needed some kind of initial foothold—through things like phishing links, stolen remote desktop credentials, or other methods—once inside, maintaining access became a challenge. Antivirus software was getting stronger, and simply dropping suspicious binaries was no longer effective.&lt;/p&gt;
&lt;p&gt;To adapt, some hackers in the 2010s developed what is now known as a &lt;strong&gt;Living off the Land&lt;/strong&gt; (LotL) attack. This type of attack uses already trusted system tools like PowerShell, WMI, or certutil to run malicious commands, download payloads, or exfiltrate data—often without writing anything to disk. It’s hard to detect because the behavior doesn’t originate from some unknown file or process like traditional malware—it comes from legitimate processes that the system is likely already using, allowing it to blend into the background.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple IDS</title>
      <link>http://localhost:1313/projects/ids/</link>
      <pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/ids/</guid>
      <description>A Python-based intrusion detection system that monitors file events and forwards logs to Splunk.</description>
    </item>
    <item>
      <title>The State of ML in Cybersecurity</title>
      <link>http://localhost:1313/posts/the-current-state-of-ml-in-cs/</link>
      <pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/the-current-state-of-ml-in-cs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.skrasser.com/blog/2025/02/08/detecting-malware-with-machine-learning/&#34;&gt;Crowdstrike Article&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While AI is on the rise and seems to be unstoppable, its applications to threat detection—specifically in cybersecurity—have yet to show great promise. Traditional approaches to applying machine learning to threat detection overlook some important factors. The first is the sheer amount of data required to train a reliable detection model. While there is no shortage of data in areas like memory usage, CPU usage, file changes, and other system activity, the data for successfully flagging actual malicious behavior—especially malware executions—is sparse.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
